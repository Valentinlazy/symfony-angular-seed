##################################################
# Generated by phansible.com
##################################################

#If your Vagrant version is lower than 1.5, you can still use this provisioning
#by commenting or removing the line below and providing the config.vm.box_url parameter,
#if it's not already defined in this Vagrantfile. Keep in mind that you won't be able
#to use the Vagrant Cloud and other newer Vagrant features.
Vagrant.require_version ">= 1.5"

# Check to determine whether we're on a windows or linux/os-x host,
# later on we use this to launch ansible in the supported way
# source: https://stackoverflow.com/questions/2108727/which-in-ruby-checking-if-program-exists-in-path-from-ruby
def which(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each { |ext|
            exe = File.join(path, "#{cmd}#{ext}")
            return exe if File.executable? exe
        }
    end
    return nil
end

def require_plugin(name)
  unless Vagrant.has_plugin?(name)
    puts <<-EOT.strip
      #{name} plugin required. Please run: "vagrant plugin install #{name}"
    EOT
    exit
  end
end

require_plugin 'vagrant-hostmanager'

Vagrant.configure("2") do |config|

    config.vm.provider :virtualbox do |v|
        v.name = "callback"
        v.customize [
            "modifyvm", :id,
            "--name", "callback",
            "--memory", 1536,
            "--natdnshostresolver1", "on",
            "--cpus", 1,
        ]
    end

    config.vm.box = "ubuntu/trusty64"
    
    config.hostmanager.ip_resolver = proc do |vm, resolving_vm|
        if hostname = (vm.ssh_info && vm.ssh_info[:host])
            `vagrant ssh -c "hostname -I"`.split()[1]
        end
    end

    config.vm.network :private_network, type: "dhcp"
    config.ssh.forward_agent = true

    #############################################################
    # Ansible provisioning (you need to have ansible installed)
    #############################################################

    
    if which('ansible-playbook')
        config.vm.provision "ansible" do |ansible|
            ansible.playbook = "ansible/playbook.yml"
            ansible.limit = 'all'
        end
    else
        config.vm.provision :shell, path: "ansible/windows.sh", args: ["callback.vagrant"]
    end

    config.vm.synced_folder(
        ".", "/vagrant",
        type: "nfs",
        mount_options:  %w(rw vers=3 udp fsc actimeo=2)
    )

	config.hostmanager.enabled = true
	config.hostmanager.manage_host = true
	config.hostmanager.ignore_private_ip = false
	config.hostmanager.include_offline = true
	config.vm.define 'callback' do |node|
	    node.vm.hostname = 'callback.vagrant'
    	node.hostmanager.aliases = %w(callback.vagrant)
	end

end
